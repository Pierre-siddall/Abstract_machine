exec (acomp a) (0,s,[]) == (length (acomp a), s, [aval a s])

Proof:

Case a = (N x)

exec (acomp (N x))(0,s,[])
[applying acomp]=exec [Machine.LOADI x] (0,s,[])
[simplifying Machine.LOADI]=exec [LOADI x] (0,s,[])
[applying exec]= iexec (head [LOADI x]) (0,s,[])
[applying head]= iexec (LOADI x) (0,s,[])
[applying iexec]=(0+1,s,x:[])
[applying +]=(1,s,x:[])
[applying :]=(1,s,[x])
[applying IH]=(length(acomp (N x)),s,[aval (N x) s])

Case a= (V v)

exec (acomp (V v)) (0,s,[])
[applying acomp]= exec [Machine.LOAD v] (0,s,[])
[simplifying Machine.LOAD]= exec [LOAD v] (0,s,[])
[applying exec]= iexec (head ([LOAD v])) (0,s,[])
[applying head]= iexec (LOAD v) (0,s,[]) 
[applying iexec]=(0+1,s,[x | Just x <- [Data.Map.lookup v s]])
[applying +]=(1,s,[x | Just x <- [Data.Map.lookup v s]])
[applying Data.Map.lookup]=(1,s,[x | Just x <- [x]])
[applying Just]=(1,s,[x | x <-[x]])
[applying list comprehension]=(1,s,[x])
[applying IH]=(length (acomp (N x)),s,[aval (N x) s])

Case a= (Plus a1 a2)
exec (acomp (Plus a1 a2)) (0,s,[])
[applying acomp]= exec [head(acomp a1),head(acomp a2),Machine.ADD] (0,s,[])
[simplifying Machine.ADD]= exec [head(acomp a1),head(acomp a2),ADD] (0,s,[])
[applying acomp]= exec [head [a], head [b],ADD] (0,s,[])
[applying head]= exec [a,b,ADD] (0,s,[])
[applying exec]= exec ([b,ADD]) (iexec (a) (0,s,[]))
[applying exec]= exec ([ADD]) (iexec (b)(iexec (a) (0,s,[]) ))
[applying exec]=iexec (ADD) (iexec (b)(iexec (a) (0,s,[]) ))
[applying iexec and IH]=(0+1+1+1,s,[aval (a1) s + aval (a2) s])
[applying IH] =(0+1+1+1,s,[aval (Plus a1 a2) s])
[applying +] =(3,s,[aval (Plus a1 a2) s])
[applying IH]= (length (acomp (Plus a1 a2),s,[aval (Plus a1 a2) s])

Therefore 

exec (acomp a) (0,s,[]) = (length(acomp a),s,[aval a s])

--TODO Task 4